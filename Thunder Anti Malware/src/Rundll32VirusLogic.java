import org.w3c.dom.ls.LSOutput;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.time.format.TextStyle;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Rundll32VirusLogic {

    /****************
     * This Module Created By Ahmad Almorabea on 9th of August 2021 @almorabea

        Rundll32.exe Malware Mitigation steps
        [+] Delete .lnk files
        [+] Delete the original file which start with "-_-_.{AnyString}" in the � folder
        [+] Delete desktop.ini file from � folder
        [+] Delete IndexerVolumeGuid folder in � folder
        [+] Delete the filer "-_-_.{AnyString}" from the original desk
        [+] Move files and folders from � folder to the original desk
        [+] Delete � folder aka \0xA0
    *****************/

    char MaliciousChar = (char) 0xA0;
    //byte  MaliciousChar1 = (byte) 0xFFFD;

    String Tests [] = {String.valueOf(Rundll32Virus.driveList.getSelectedItem()),String.valueOf(Rundll32Virus.driveList.getSelectedItem())+MaliciousChar};

    public  void Action (String drive) throws IOException, ParseException {
        System.out.println("printing the weird Char : " + String.valueOf(MaliciousChar));



        int count = 0 ;
        String[] files1 = {};
        for (int i = 0 ; i < Tests.length ; i++) {
            File file = new File(Tests[i]);
            try {
                File[] fileList = file.listFiles((d, f) -> f.toLowerCase().endsWith(".lnk"));
                files1 = new String[fileList.length];
                for (File f : fileList) {
                    files1[count] = f.getAbsolutePath();



                    count++;
                }
            } catch (Exception ex) {
                System.out.println("Error");
            }
        }

        ViewFiles();
        String inkfiles [] = deleteInkFiles();
        for (String str: inkfiles) {Rundll32Virus.setTextOnLable(str+"  file got deleted \n");}
        deleteConfigurationfiles();
        deleteWeiredChars();
        RestoreFiles();
        deleteTheMaliciousFolder();
        Rundll32Virus.setTextOnLable("Module Ended Successfully");
    }

    public  String[] deleteInkFiles() throws IOException
    {
        Rundll32Virus.setTextOnLable("\n\n [+] Delete symlink files");
        int count = 0;
        //String Tests [] = {drive,drive+MaliciousChar};
        String extension = ".lnk";
        String[] files1 = {};
        for (int i = 0 ; i < Tests.length ; i++)
        {
            File file = new File(Tests[i]);
            try
            {
                File[] fileList = file.listFiles((d, f) -> f.toLowerCase().endsWith(extension));
                files1 = new String[fileList.length];
                for (File f : fileList) {
                    files1[count] = f.getAbsolutePath();

                    //System.out.println(f.getAbsolutePath());
                    if (!f.delete())
                        throw new IOException("Not able to delete ink file: " + f.getAbsolutePath());

                    count++;
                }
            }catch (Exception ex ){}
        }

        return files1;
    }

    public  void deleteWeiredChars ()
    {
        Rundll32Virus.setTextOnLable("\n\n [+] Remove Dll Invoker");
        //String Tests [] = {drive,drive+MaliciousChar};
        for (int i = 0 ; i < Tests.length ; i++)
        {
            final File downloadDirectory = new File(Tests[i]);
            final File[] files = downloadDirectory.listFiles((dir, name) -> name.matches("-_.*?"));
            Arrays.asList(files).stream().forEach(File::delete);
            for (File file: files) {
                Rundll32Virus.setTextOnLable("File " + Tests[i]+"/"+file.getName() + " Deleted");
            }


        }
    }

    public  void deleteConfigurationfiles() {
        Rundll32Virus.setTextOnLable("\n\n [+] Reset Configurations ");
        String maliciousFiles [] = {"desktop.ini","IndexerVolumeGuid"};
        //String maliciousFolder = "IndexerVolumeGuid";
        System.out.println("Test array Check : " + Tests[0]);
        for (int i = 0 ; i <Tests.length; i++)
        {
            File folder = new File(Tests[i]);
            File[] listOfFiles = folder.listFiles();

            for (int j = 0 ; j < maliciousFiles.length ; j++ )
            {
                try
                {
                        for (int a = 0; a < listOfFiles.length; a++) {
                        if (listOfFiles[a].getName().equals(maliciousFiles[j]))
                        {
                            //maliciousFiles[j]
                            //Rundll32Virus.setTextOnLable("[+] Malicious File Found");
                            File delete = new File(listOfFiles[a].getAbsolutePath());
                            delete.delete();
                            Rundll32Virus.setTextOnLable("[*] File " + listOfFiles[a].getAbsolutePath() + " Deleted ");
                        }
                    }
                }
                catch(Exception ex){}
            }
        }

    }


    public  boolean RestoreFiles() {
        File dir1 = new File(Tests[1]);
        Rundll32Virus.setTextOnLable("\n\n [+] Restored Files");

        if (dir1.isDirectory()) {
            File[] content = dir1.listFiles() ;
            for (int i = 0; i < content.length; i++) {
                File dir2 = new File(Tests[1]+"/"+content[i].getName());
                //System.out.println("$$$ : "+drive+"test/"+content[i].getName());
                boolean test = dir2.renameTo(new File(Tests[0]+"/"+content[i].getName()));
                Rundll32Virus.setTextOnLable("[*]  "+content[i].getName() );

            }
        } else{
            Rundll32Virus.setTextOnLable("is not directory");
        }
        return true;
    }

    public void deleteTheMaliciousFolder ()
    {
        File last = new File (Tests[1]);

        Rundll32Virus.setTextOnLable("Malicious folder deleted " + Tests[1]+ " : " +last.delete());
    }

    public static List<String> findFiles(Path path, String fileExtension)
            throws IOException {

        if (!Files.isDirectory(path)) {
            throw new IllegalArgumentException("Path must be a directory!");
        }

        List<String> result;

        try (Stream<Path> walk = Files.walk(path)) {
            result = walk
                    .filter(p -> !Files.isDirectory(p))
                    // this is a path, not string,
                    // this only test if path end with a certain path
                    //.filter(p -> p.endsWith(fileExtension))
                    // convert path to string first
                    .map(p -> p.toString().toLowerCase())
                    .filter(f -> f.endsWith(fileExtension))
                    .collect(Collectors.toList());
        }

        return result;
    }

    public  boolean ViewFiles() throws IOException {
        File dir1 = new File(Tests[1]);
        Rundll32Virus.setTextOnLable("\n\n [+] View Files");

        if (dir1.isDirectory()) {
            File[] content = dir1.listFiles() ;
            for (int i = 0; i < content.length; i++) {
                //File dir2 = new File(Tests[1]+"/"+content[i].getName());
                //System.out.println("$$$ : "+drive+"test/"+content[i].getName());
                //boolean test = dir2.renameTo(new File(Tests[0]+"/"+content[i].getName()));
                Rundll32Virus.setTextOnLable("[**]  "+content[i].getName() );



            }
        } else{
            Rundll32Virus.setTextOnLable("is not directory");
        }
        return true;
    }


}
